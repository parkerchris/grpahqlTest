


    type Query {
        users(query: String): [User]!
        me: User!
        post: Post!
        posts(query: String): [Post]!
        comments: [Comment]!
    }

    type Mutation {
        createUser(data: CreateUserInput!): User!
        deleteUser(id: ID!): User!
        updateUser(id: ID!, data: UpdateUserInput): User!
        createPost(title: String!, body: String!, published: Boolean!, author: ID!): Post!
        createComment(text: String!, author: ID!, post: ID!): Comment!
    }

    type Subscription {
        count: Int!
    }

    input CreateUserInput {
        name: String!
        email: String!
        age: Int
    }

    input UpdateUserInput {
        name: String
        email: String
        age: Int
    }

    type User {
        id: ID!
        name: String!
        email: String!
        age: Int
        posts: [Post!]!
        comments: [Comment!]!
    }

    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment!]!
    }

    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }

    enum MutationType {
        CREATED
        UPDATED
        DELETED
    }

    type PostSubscriptionPayload {
        mutation: MutationType!
        data: Post!
    }

    type CommentSubscriptionPayload {
        mutation: MutationType!
        data: Comment!
    }